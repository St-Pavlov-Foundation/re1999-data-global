module("framework.network.socket.LuaSocketMgr", package.seeall)

slot0 = class("LuaSocketMgr")

function slot0.ctor(slot0)
	slot0._systemCmds = nil
	slot0._moduleCmds = nil
	slot0._preSenders = {}
	slot0._preReceivers = {}
	slot0._req2CmdDict = {}
	slot0._res2CmdDict = {}
	slot0._csSocketMgr = SLFramework.SocketMgr.Instance
	slot0._ignoreSomeCmdLog = false
	slot0._ignoreCmds = {}
	slot0._headerSize4Send = 11
end

function slot0.setIgnoreSomeCmdLog(slot0, slot1)
	if not slot1 then
		slot0._ignoreSomeCmdLog = false

		return
	end

	slot0._ignoreSomeCmdLog = true

	for slot5, slot6 in ipairs(slot1) do
		slot0._ignoreCmds[slot6] = true
	end
end

function slot0._canLog(slot0, slot1)
	return not slot0._ignoreSomeCmdLog or not slot0._ignoreCmds[slot1]
end

function slot0.init(slot0, slot1, slot2)
	slot0._systemCmds = slot1
	slot0._moduleCmds = slot2

	for slot6, slot7 in pairs(slot0._moduleCmds) do
		if #slot7 == 3 then
			slot0._req2CmdDict[slot7[2]] = slot6
			slot0._res2CmdDict[slot7[3]] = slot6
		elseif #slot7 == 2 then
			slot0._res2CmdDict[slot7[2]] = slot6
		end
	end

	slot0._csSocketMgr:SetLuaHandler(slot0._onReceiveMainMsg, slot0, SocketId.Main)
end

function slot0.reInit(slot0)
	slot0._csSocketMgr:Dispose()
	slot0._csSocketMgr:SetLuaHandler(slot0._onReceiveMainMsg, slot0, SocketId.Main)
end

function slot0.registerPreSender(slot0, slot1)
	table.insert(slot0._preSenders, slot1)
end

function slot0.unregisterPreSender(slot0, slot1)
	if not slot1 then
		return
	end

	for slot5, slot6 in ipairs(slot0._preSenders) do
		if slot6 == slot1 then
			table.remove(slot0._preSenders, slot5)

			break
		end
	end
end

function slot0.registerPreReceiver(slot0, slot1)
	table.insert(slot0._preReceivers, slot1)
end

function slot0.unregisterPreReceiver(slot0, slot1)
	if not slot1 then
		return
	end

	for slot5, slot6 in ipairs(slot0._preReceivers) do
		if slot6 == slot1 then
			table.remove(slot0._preReceivers, slot5)

			break
		end
	end
end

function slot0.setConnectBeginCallback(slot0, slot1, slot2, slot3)
	slot0._csSocketMgr:SetConnectBeginCallback(slot1, slot2, slot3 or SocketId.Main)
end

function slot0.setConnectEndCallback(slot0, slot1, slot2, slot3)
	slot0._csSocketMgr:setConnectEndCallback(slot1, slot2, slot3 or SocketId.Main)
end

function slot0.setSeqId(slot0, slot1, slot2)
	slot0._csSocketMgr:SetSeqId(slot1, slot2 or SocketId.Main)
end

function slot0.beginConnect(slot0, slot1, slot2, slot3)
	return slot0._csSocketMgr:BeginConnect(slot1, slot2, slot3 or SocketId.Main)
end

function slot0.endConnect(slot0, slot1)
	slot0._csSocketMgr:EndConnect(slot1 or SocketId.Main)
end

function slot0.isConnected(slot0, slot1)
	return slot0._csSocketMgr:IsConnected(slot1 or SocketId.Main)
end

function slot0.sendSysMsg(slot0, slot1, slot2, slot3)
	for slot8, slot9 in ipairs(slot0._preSenders) do
		if slot9.preSendSysMsg then
			slot4 = slot9:preSendSysMsg(slot1, slot2, slot3 or SocketId.Main) or nil
		end
	end

	if not slot4 then
		slot0:reallySendSysMsg(slot1, slot2, slot3 or SocketId.Main)
	end
end

function slot0.getSysMsgSendBuffLen(slot0, slot1, slot2)
	return string.len(slot0._systemCmds.GetSendMsg(slot1, slot2)) + slot0._headerSize4Send
end

function slot0.reallySendSysMsg(slot0, slot1, slot2, slot3)
	slot0._csSocketMgr:SendMsg(slot1, slot0._systemCmds.GetSendMsg(slot1, slot2), slot3 or SocketId.Main)

	slot5 = slot0._systemCmds.GetRequestName(slot1)

	if canLogNormal and isDebugBuild and slot0:_canLog(slot5) then
		logNormal(string.format("==> Send Sys Msg, cmd:%d %s size:%d\n%s", slot1, slot5, string.len(slot4), cjson.encode(slot2)))
	end
end

function slot0.sendMsg(slot0, slot1, slot2)
	if slot0._req2CmdDict[slot1.__cname] then
		slot5 = nil

		for slot9, slot10 in ipairs(slot0._preSenders) do
			if slot10.blockSendProto and slot10:blockSendProto(slot4, slot1, slot2 or SocketId.Main) then
				break
			end
		end

		if not slot5 then
			for slot9, slot10 in ipairs(slot0._preSenders) do
				if slot10.preSendProto then
					slot10:preSendProto(slot4, slot1, slot2 or SocketId.Main)
				end
			end

			slot0:reallySendMsg(slot4, slot1, slot2 or SocketId.Main)
		else
			logWarn("LuaSocketMgr block " .. slot3)
		end
	else
		logError("cmd not exist: " .. slot3)
	end
end

function slot0.reallySendMsg(slot0, slot1, slot2, slot3)
	slot0._csSocketMgr:SendMsg(slot1, slot2:SerializeToString(), slot3 or SocketId.Main)

	slot5 = slot2.__cname

	if canLogNormal and isDebugBuild and slot0:_canLog(slot5) then
		logNormal(string.format("==> Send Msg, cmd:%d %s size:%d\n%s", slot1, slot5, string.len(slot4), tostring(slot2)))
	end
end

function slot0._onReceiveMainMsg(slot0, slot1, slot2, slot3, slot4, slot5)
	if slot0._systemCmds[slot2] then
		slot8 = slot0._systemCmds.GetResponseName(slot2)

		if canLogNormal and isDebugBuild and slot0:_canLog(slot8) then
			logNormal(string.format("<== Recv Sys Msg, cmd:%d %s size:%d resultCode:%d downTag:%d\n%s", slot2, slot8, string.len(slot3), slot1, slot4, cjson.encode(slot0._systemCmds.GetReceiveMsg(slot2, slot3))))
		end

		for slot13, slot14 in ipairs(slot0._preReceivers) do
			if slot14.preReceiveSysMsg then
				slot9 = slot14:preReceiveSysMsg(slot1, slot2, slot8, slot7, slot4, slot5) or nil
			end
		end

		if not slot9 then
			slot0:_rpcReceiveMsg(slot6[1], true, slot1, slot2, slot8, slot7, slot4, slot5)
		end
	else
		if not slot0._moduleCmds[slot2] then
			logError("cmd not exist: " .. slot2)

			return
		end

		slot8 = #slot7 == 3 and slot7[3] or slot7[2]

		if not (getGlobal(slot7[1] .. "Module_pb") or addGlobalModule("modules.proto." .. slot9, slot9)) then
			logError(string.format("pb not exist: %s res = %s", slot9, slot8))

			return
		end

		slot10[slot8]():ParseFromString(slot3)

		if canLogNormal and isDebugBuild and slot0:_canLog(slot8) then
			logNormal(string.format("%s<== Recv Msg, cmd:%d %s size:%d resultCode:%d downTag:%d%s\n%s", slot1 == 0 and "" or "<color=#FFA500>", slot2, slot8, string.len(slot3), slot1, slot4, slot1 == 0 and "" or "</color>", tostring(slot12)))

			if string.len(slot3) > 1000 then
				for slot21 = 1, math.ceil(#string.split(tostring(slot12), "\n") / 500) do
					logNormal(table.concat(slot16, "\n", (slot21 - 1) * 500 + 1, math.min(slot21 * 500, #slot16)))
				end
			end
		end

		for slot17, slot18 in ipairs(slot0._preReceivers) do
			if slot18.preReceiveMsg then
				slot13 = slot18:preReceiveMsg(slot1, slot2, slot8, slot12, slot4, slot5) or nil
			end
		end

		if not slot13 then
			slot0:_rpcReceiveMsg(slot7[1], false, slot1, slot2, slot8, slot12, slot4, slot5)
		end
	end
end

function slot0._rpcReceiveMsg(slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8)
	if slot2 then
		SystemLoginRpc.instance:onReceiveMsg(slot3, slot4, slot5, slot6, slot7, slot8)

		return
	end

	if getGlobal(slot1 .. "Rpc") and slot9["onReceive" .. slot5] then
		slot9.instance:onReceiveMsg(slot3, slot4, slot5, slot6, slot7, slot8)

		return
	elseif ModuleMgr.instance:getSetting(slot1) and slot10.rpc then
		for slot14, slot15 in ipairs(slot10.rpc) do
			if getGlobal(slot15) and slot9["onReceive" .. slot5] then
				slot9.instance:onReceiveMsg(slot3, slot4, slot5, slot6, slot7, slot8)

				return
			end
		end
	end

	logError(string.format("cmd_%d onReceive%s = nil, module:%s", slot4, slot5, slot1))
end

function slot0.getCmdByPbStructName(slot0, slot1)
	return slot0._req2CmdDict[slot1] or slot0._res2CmdDict[slot1]
end

function slot0.getCmdSettingDict(slot0)
	return slot0._moduleCmds
end

function slot0.getCmdSetting(slot0, slot1)
	return slot0._moduleCmds[slot1]
end

function slot0.getSysCmdSetting(slot0, slot1)
	return slot0._systemCmds[slot1]
end

slot0.instance = slot0.New()

return slot0
