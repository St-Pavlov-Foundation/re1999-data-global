module("framework.mvc.view.UIBlockMgr", package.seeall)

slot0 = class("UIBlockMgr")
slot0.DefaultKey = "default"

function slot0.ctor(slot0)
	slot0._blockKeyDict = {}
	slot0._goBlock = nil
	slot0._clickCounter = 0
end

function slot0.startBlock(slot0, slot1)
	slot0._blockKeyDict[slot1 or uv0.DefaultKey] = true

	slot0:_checkFirstCreateMask()
	gohelper.setActive(slot0._goBlock, true)
end

function slot0.endBlock(slot0, slot1)
	slot0._blockKeyDict[slot1 or uv0.DefaultKey] = nil

	for slot5, slot6 in pairs(slot0._blockKeyDict) do
		return
	end

	gohelper.setActive(slot0._goBlock, false)

	slot0._clickCounter = 0
end

function slot0.endAll(slot0)
	if slot0:isBlock() then
		slot0._blockKeyDict = {}

		gohelper.setActive(slot0._goBlock, false)

		slot0._clickCounter = 0
	end
end

function slot0.isBlock(slot0)
	for slot4, slot5 in pairs(slot0._blockKeyDict) do
		return true
	end
end

function slot0.isKeyBlock(slot0, slot1)
	return slot0._blockKeyDict[slot1]
end

function slot0.getBlockGO(slot0)
	slot0:_checkFirstCreateMask()

	return slot0._goBlock
end

function slot0._checkFirstCreateMask(slot0)
	if not slot0._goBlock then
		slot0._goBlock = gohelper.find("UIRoot/TOP/UIBlock")

		SLFramework.UGUI.UIClickListener.Get(slot0._goBlock):AddClickListener(slot0._onClickBlock, slot0)
	end
end

function slot0._onClickBlock(slot0)
	slot0._clickCounter = slot0._clickCounter + 1

	if slot0._clickCounter == 5 then
		slot1 = {}

		for slot5, slot6 in pairs(slot0._blockKeyDict) do
			table.insert(slot1, slot5)
		end

		logNormal("BlockKeys: " .. table.concat(slot1, ","))
	end
end

slot0.instance = slot0.New()

return slot0
