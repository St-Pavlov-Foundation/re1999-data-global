assert(require("jit").version_num == 20100, "LuaJIT core/library version mismatch")

slot1 = require("jit.util")
slot3 = require("bit")
slot4 = string.sub
slot5 = string.gsub
slot6 = string.format
slot7 = string.byte
slot8 = slot3.band
slot9 = slot3.rshift
slot10 = slot1.funcinfo
slot11 = slot1.funcbc
slot12 = slot1.funck
slot13 = slot1.funcuvname
slot14 = require("jit.vmdef").bcnames
slot15 = io.stdout
slot16 = io.stderr

function slot17(slot0)
	if slot0 == "\n" then
		return "\\n"
	elseif slot0 == "\r" then
		return "\\r"
	elseif slot0 == "\t" then
		return "\\t"
	else
		return uv0("\\%03d", uv1(slot0))
	end
end

slot21, slot22 = nil

function slot23(slot0)
	return uv0(slot0, uv1)
end

function slot25(slot0)
	if uv0 then
		uv1()
	end

	if slot0 or os.getenv("LUAJIT_LISTFILE") then
		uv2 = slot0 == "-" and uv3 or assert(io.open(slot0, "w"))
	else
		uv2 = uv4
	end

	uv5.attach(uv6, "bc")

	uv0 = true
end

return {
	line = function (slot0, slot1, slot2, slot3)
		slot4, slot5, slot6 = uv0(slot0, slot1, slot3 and 1 or 0)

		if not slot4 then
			return
		end

		slot7 = uv1(slot5, 7)
		slot8 = uv1(slot5, 120)
		slot10 = uv1(uv2(slot4, 8), 255)
		slot11 = 6 * uv1(slot4, 255)
		slot12 = uv3(uv4, slot11 + 1, slot11 + 6)
		slot13 = nil

		if uv1(slot5, 1920) == 1664 then
			return uv5("%s=> %04d\n", (not slot3 or uv5("%04d %7s %s %-6s %3s ", slot1, "[" .. slot6 .. "]", slot2 or "  ", slot12, slot7 == 0 and "" or slot10)) and uv5("%04d %s %-6s %3s ", slot1, slot2 or "  ", slot12, slot7 == 0 and "" or slot10), slot1 + uv2(slot4, 16) - 32767)
		end

		if slot8 ~= 0 then
			slot14 = uv1(slot14, 255)
		elseif slot9 == 0 then
			return slot13 .. "\n"
		end

		slot15 = nil

		if slot9 == 1280 then
			slot15 = uv5(#uv6(slot0, -slot14 - 1) > 40 and "\"%.40s\"~" or "\"%s\"", uv7(slot15, "%c", uv8))
		elseif slot9 == 1152 then
			if slot12 == "TSETM " then
				slot15 = uv6(slot0, slot14) - 4503599627370496.0
			end
		elseif slot9 == 1536 then
			if uv9(uv6(slot0, -slot14 - 1)).ffid then
				slot15 = uv10.ffnames[slot16.ffid]
			else
				slot15 = slot16.loc
			end
		elseif slot9 == 640 then
			slot15 = uv11(slot0, slot14)
		end

		if slot7 == 5 then
			slot16 = uv11(slot0, slot10)
			slot15 = slot15 and slot16 .. " ; " .. slot15 or slot16
		end

		if slot8 ~= 0 then
			slot16 = uv2(slot4, 24)

			if slot15 then
				return uv5("%s%3d %3d  ; %s\n", slot13, slot16, slot14, slot15)
			end

			return uv5("%s%3d %3d\n", slot13, slot16, slot14)
		end

		if slot15 then
			return uv5("%s%3d      ; %s\n", slot13, slot14, slot15)
		end

		if slot9 == 896 and slot14 > 32767 then
			slot14 = slot14 - 65536
		end

		return uv5("%s%3d\n", slot13, slot14)
	end,
	dump = function (slot0, slot1, slot2, slot3)
		slot1 = slot1 or uv0

		if slot2 and uv1(slot0).children then
			for slot8 = -1, -1000000000, -1 do
				if not uv2(slot0, slot8) then
					break
				end

				if type(slot9) == "proto" then
					uv3(slot9, slot1, true, slot3)
				end
			end
		end

		slot8 = uv4

		slot1:write(slot8("-- BYTECODE -- %s-%d\n", slot4.loc, slot4.lastlinedefined))

		for slot8 = -1, -1000000000, -1 do
			if not uv2(slot0, slot8) then
				break
			end

			if type(slot9) == "string" then
				slot1:write(uv4("KGC    %d    %s\n", -(slot8 + 1), uv4(#slot9 > 40 and "\"%.40s\"~" or "\"%s\"", uv5(slot9, "%c", uv6))))
			elseif slot10 == "proto" then
				slot1:write(uv4("KGC    %d    %s\n", -(slot8 + 1), (not uv1(slot9).ffid or uv7.ffnames[slot11.ffid]) and slot11.loc))
			elseif slot10 == "table" then
				slot1:write(uv4("KGC    %d    table\n", -(slot8 + 1)))
			end
		end

		for slot8 = 1, 1000000000 do
			if not uv2(slot0, slot8) then
				break
			end

			if type(slot9) == "number" then
				slot1:write(uv4("KN    %d    %s\n", slot8, slot9))
			end
		end

		for slot9 = 1, 1000000000 do
			if not uv9(slot0, slot9, uv8(slot0)[slot9] and "=>", slot3) then
				break
			end

			slot1:write(slot10)
		end

		slot1:write("\n")
		slot1:flush()
	end,
	targets = function (slot0)
		slot1 = {}

		for slot5 = 1, 1000000000 do
			slot6, slot7 = uv0(slot0, slot5)

			if not slot6 then
				break
			end

			if uv1(slot7, 1920) == 1664 then
				slot1[slot5 + uv2(slot6, 16) - 32767] = true
			end
		end

		return slot1
	end,
	on = slot25,
	off = function ()
		if uv0 then
			uv0 = false

			uv1.attach(uv2)

			if uv3 and uv3 ~= uv4 and uv3 ~= uv5 then
				uv3:close()
			end

			uv3 = nil
		end
	end,
	start = slot25
}
