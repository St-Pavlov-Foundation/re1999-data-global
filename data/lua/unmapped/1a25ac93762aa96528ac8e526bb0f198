module("framework.network.socket.work.WorkConnectSocket", package.seeall)

slot0 = class("WorkConnectSocket", BaseWork)
slot1 = "ConnectSocket"

function slot0.ctor(slot0, slot1)
	slot0._firstLogin = slot1
end

function slot0.onStart(slot0, slot1)
	slot0._ip = SLFramework.UnityHelper.ParseDomainToIp(slot1.ip)
	slot0._port = slot1.port

	if slot0._firstLogin then
		slot0._startTime = os.time()

		SLFramework.TimeWatch.Instance:Start()

		slot0._dataLength = LuaSocketMgr.instance:getSysMsgSendBuffLen(1, {
			account = slot1.account,
			password = slot1.password,
			connectWay = 0
		})
	end

	UIBlockMgr.instance:startBlock(uv0)
	LuaSocketMgr.instance:setConnectBeginCallback(slot0._onConnectBegin, slot0)

	if LuaSocketMgr.instance:beginConnect(slot0._ip, slot0._port) then
		TaskDispatcher.runDelay(slot0._onConnectTimeout, slot0, NetworkConst.SocketConnectTimeout)
	else
		logWarn("<color=#FF0000>connect fail: isConnecting, or IpEndPoint = null</color>")

		slot0.context.socketFail = true

		slot0:onDone(false)
	end
end

function slot0.onResume(slot0)
	LuaSocketMgr.instance:setConnectBeginCallback(slot0._onConnectBegin, slot0)
	TaskDispatcher.runDelay(slot0._onConnectTimeout, slot0, NetworkConst.SocketConnectTimeout)
end

function slot0.clearWork(slot0)
	UIBlockMgr.instance:endBlock(uv0)
	LuaSocketMgr.instance:setConnectBeginCallback(nil, )
	TaskDispatcher.cancelTask(slot0._onConnectTimeout, slot0)
end

function slot0._onConnectBegin(slot0, slot1, slot2)
	if slot0._firstLogin then
		slot4 = SLFramework.TimeWatch.Instance:Watch()

		SDKDataTrackMgr.instance:trackSocketConnectEvent(slot2 and SDKDataTrackMgr.RequestResult.success or SDKDataTrackMgr.RequestResult.fail, slot0._startTime, slot4 - slot4 % 0.001, slot0._dataLength, slot0._ip .. ":" .. slot0._port)
	end

	if slot2 then
		slot0.context.socketFail = nil

		slot0:onDone(true)
	else
		slot0.context.socketFail = true

		slot0:onDone(false)
	end
end

function slot0._onConnectTimeout(slot0)
	if slot0._firstLogin then
		slot1 = SLFramework.TimeWatch.Instance:Watch()

		SDKDataTrackMgr.instance:trackSocketConnectEvent(SDKDataTrackMgr.RequestResult.fail, slot0._startTime, slot1 - slot1 % 0.001, slot0._dataLength, slot0._ip .. ":" .. slot0._port)
	end

	slot0.context.socketFail = true

	slot0:onDone(false)
end

return slot0
