module("booter.base.tabletool", package.seeall)

slot0 = {
	copy = function (slot0)
		for slot5, slot6 in pairs(slot0) do
			-- Nothing
		end

		return {
			[slot5] = slot6
		}
	end,
	indexOf = function (slot0, slot1, slot2)
		for slot6 = slot2 or 1, #slot0 do
			if slot0[slot6] == slot1 then
				return slot6
			end
		end
	end,
	removeValue = function (slot0, slot1)
		for slot5, slot6 in ipairs(slot0) do
			if slot6 == slot1 then
				table.remove(slot0, slot5)

				return
			end
		end
	end,
	addValues = function (slot0, slot1)
		if slot0 and slot1 then
			for slot5, slot6 in ipairs(slot1) do
				table.insert(slot0, slot6)
			end
		end
	end,
	clear = function (slot0)
		for slot4, slot5 in pairs(slot0) do
			slot0[slot4] = nil
		end
	end,
	revert = function (slot0)
		if not slot0 then
			return
		end

		slot1 = 1
		slot2 = #slot0

		while slot1 < slot2 do
			slot0[slot1] = slot0[slot2]
			slot0[slot2] = slot0[slot1]
			slot1 = slot1 + 1
			slot2 = slot2 - 1
		end
	end,
	len = function (slot0)
		for slot5, slot6 in pairs(slot0) do
			if slot0[slot5] ~= nil then
				slot1 = 0 + 1
			end
		end

		return slot1
	end,
	pureTable = function (slot0, slot1)
		slot2 = {
			__cname = slot0,
			__index = slot2
		}

		if slot1 then
			slot2.__newindex = slot1.__newindex
		else
			function slot2.__newindex(slot0, slot1, slot2)
				if type(slot2) == "userdata" or type(slot2) == "function" then
					error("pureTable instance object field not support userdata or function,key=" .. slot1)
				else
					rawset(slot0, slot1, slot2)
				end
			end
		end

		function slot2.ctor(slot0)
		end

		function slot2.New()
			slot0 = {
				__cname = uv0
			}

			uv1.ctor(slot0)
			setmetatable(slot0, uv1)

			return slot0
		end

		setmetatable(slot2, {
			__index = slot1,
			__newindex = function (slot0, slot1, slot2)
				if type(slot2) ~= "function" then
					error("pureTable table only support function!key=" .. slot1)
				else
					rawset(slot0, slot1, slot2)
				end
			end
		})

		return slot2
	end,
	getDictJsonStr = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			table.insert(slot1, cjson.encode(slot5) .. ":" .. cjson.encode(slot6))
		end

		return string.format("{%s}", table.concat(slot1, ","))
	end
}

setGlobal("pureTable", slot0.pureTable)
setGlobal("tabletool", slot0)
