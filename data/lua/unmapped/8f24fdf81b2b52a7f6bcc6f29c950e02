module("framework.mvc.view.ToggleListView", package.seeall)

slot0 = class("ToggleListView", BaseView)

function slot0.ctor(slot0, slot1, slot2, slot3, slot4)
	uv0.super.ctor(slot0)

	slot0._tabContainerId = slot1
	slot0._toggleGroupPath = slot2
	slot0._toggleChecker = slot3
	slot0._toggleCheckerObj = slot4
	slot0._toggleGroupGO = nil
	slot0._toggleGroup = nil
	slot0._toggleDict = {}
	slot0._tabContainer = nil
end

function slot0.onInitView(slot0)
	slot0._toggleGroupGO = gohelper.findChild(slot0.viewGO, slot0._toggleGroupPath)
	slot0._toggleGroup = slot0._toggleGroupGO:GetComponent(typeof(UnityEngine.UI.ToggleGroup))

	for slot6 = 1, slot0._toggleGroupGO.transform.childCount do
		if slot1:GetChild(slot6 - 1).gameObject:GetComponent(typeof(UnityEngine.UI.Toggle)) then
			slot0._toggleDict[string.getLastNum(gohelper.onceAddComponent(slot8, typeof(SLFramework.UGUI.ToggleWrap)).name) or slot6] = slot10
		end
	end
end

function slot0.addEvents(slot0)
	if slot0._toggleChecker then
		for slot4, slot5 in pairs(slot0._toggleDict) do
			slot5:AddBlockClick(slot0._onBlockToggle, slot0, slot4)
		end
	end
end

function slot0.removeEvents(slot0)
	if slot0._toggleChecker then
		for slot4, slot5 in pairs(slot0._toggleDict) do
			slot5:RemoveBlockClick()
		end
	end
end

function slot0.onOpen(slot0)
	slot2 = slot0._toggleGroup.allowSwitchOff
	slot0._toggleGroup.allowSwitchOff = true

	for slot6, slot7 in pairs(slot0._toggleDict) do
		slot7:AddOnValueChanged(slot0._onToggleValueChanged, slot0, slot6)

		slot7.isOn = slot6 == (slot0.viewParam and slot0.viewParam.defaultTabIds and slot0.viewParam.defaultTabIds[slot0._tabContainerId] or 1)
	end

	slot0._toggleGroup.allowSwitchOff = slot2
end

function slot0.onClose(slot0)
	for slot4, slot5 in pairs(slot0._toggleDict) do
		slot5:RemoveOnValueChanged()
	end
end

function slot0.onDestroyView(slot0)
	slot0._toggleGroupPath = nil
	slot0._toggleGroupGO = nil
	slot0._toggleGroup = nil
	slot0._toggleDict = nil
end

function slot0._onBlockToggle(slot0, slot1)
	if slot0._toggleChecker and (slot0._toggleCheckerObj and slot0._toggleChecker(slot0._toggleCheckerObj, slot1) or not slot0._toggleCheckerObj and not slot0._toggleChecker(slot1)) then
		slot0._toggleDict[slot1]:TriggerClick()
	end
end

function slot0._onToggleValueChanged(slot0, slot1, slot2)
	if slot2 then
		slot0.viewContainer:dispatchEvent(ViewEvent.ToSwitchTab, slot0._tabContainerId, slot1)
	end
end

return slot0
