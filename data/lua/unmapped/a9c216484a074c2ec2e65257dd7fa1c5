module("framework.mvc.view.ViewDestroyMgr", package.seeall)

slot0 = class("ViewDestroyMgr")
slot0.TickInterval = 0.03

function slot0.init(slot0)
	slot0._isRunning = false
	slot0._dict = {}
	slot0._priorityQueue = PriorityQueue.New(function (slot0, slot1)
		return slot0.destroyTime < slot1.destroyTime
	end)

	ViewMgr.instance:registerCallback(ViewEvent.OnOpenView, slot0._onOpenView, slot0)
	ViewMgr.instance:registerCallback(ViewEvent.OnCloseViewFinish, slot0._onCloseViewFinish, slot0)
end

function slot0.destroyImmediately(slot0)
	while slot0._priorityQueue:getSize() > 0 do
		slot0._priorityQueue:getFirstAndRemove()
		ViewMgr.instance:destroyView(slot0._priorityQueue:getFirst().viewName)
	end

	slot0._isRunning = false

	TaskDispatcher.cancelTask(slot0._tick, slot0)
end

function slot0._onOpenView(slot0, slot1)
	if slot0._dict[slot1] then
		slot0._dict[slot1] = nil

		slot0._priorityQueue:markRemove(function (slot0)
			return slot0.viewName == uv0
		end)
	end
end

function slot0._onCloseViewFinish(slot0, slot1)
	slot0._dict[slot1] = true

	slot0._priorityQueue:add({
		viewName = slot1,
		destroyTime = Time.realtimeSinceStartup + (ViewMgr.instance:getSetting(slot1).destroy or uv0.TickInterval)
	})

	if not slot0._isRunning then
		slot0._isRunning = true

		TaskDispatcher.runRepeat(slot0._tick, slot0, uv0.TickInterval)
	end
end

function slot0._tick(slot0)
	slot1 = Time.realtimeSinceStartup

	while slot0._priorityQueue:getSize() > 0 do
		if slot0._priorityQueue:getFirst().destroyTime < slot1 then
			slot0._priorityQueue:getFirstAndRemove()
			ViewMgr.instance:destroyView(slot2.viewName)
		else
			break
		end
	end

	if slot0._priorityQueue:getSize() == 0 then
		slot0._isRunning = false

		TaskDispatcher.cancelTask(slot0._tick, slot0)
	end
end

slot0.instance = slot0.New()

return slot0
