module("framework.res.SequenceAbLoader", package.seeall)

slot0 = class("SequenceAbLoader")

function slot0.ctor(slot0)
	slot0._pathList = {}
	slot0._resDict = {}
	slot0._singlePath2AssetItemDict = {}
	slot0._resList = {}
	slot0._finishCallback = nil
	slot0._oneFinishCallback = nil
	slot0._loadFailCallback = nil
	slot0._callbackTarget = nil
	slot0._interval = 0.01
	slot0._concurrentCount = 1
	slot0._loadIndex = 1
	slot0._loadingCount = 0
	slot0.isLoading = false
end

function slot0.addPath(slot0, slot1)
	table.insert(slot0._pathList, slot1)
end

function slot0.setPathList(slot0, slot1)
	if slot1 then
		slot0._pathList = slot1
	end
end

function slot0.setInterval(slot0, slot1)
	slot0._interval = slot1
end

function slot0.setConcurrentCount(slot0, slot1)
	slot0._concurrentCount = slot1
end

function slot0.startLoad(slot0, slot1, slot2)
	slot0.isLoading = true
	slot0._finishCallback = slot1
	slot0._callbackTarget = slot2
	slot0._loadIndex = 0

	slot0:_loadNext()
end

function slot0.setOneFinishCallback(slot0, slot1)
	slot0._oneFinishCallback = slot1
end

function slot0.setLoadFailCallback(slot0, slot1)
	slot0._loadFailCallback = slot1
end

function slot0.getAssetItemDict(slot0)
	return slot0._resDict
end

function slot0.getAssetItem(slot0, slot1)
	return slot0._resDict[slot1] or slot0._singlePath2AssetItemDict[slot1]
end

function slot0.getFirstAssetItem(slot0)
	return slot0:getAssetItem(slot0._pathList[1])
end

function slot0.dispose(slot0)
	TaskDispatcher.cancelTask(slot0._loadNext, slot0)

	if slot0._pathList and #slot0._resList < #slot0._pathList then
		for slot4, slot5 in ipairs(slot0._pathList) do
			removeAssetLoadCb(slot5, slot0._onLoadCallback, slot0)
		end
	end

	for slot4, slot5 in ipairs(slot0._resList) do
		slot5:Release()
	end

	slot0._pathList = nil
	slot0._resDict = nil
	slot0._resList = nil
	slot0._finishCallback = nil
	slot0._oneFinishCallback = nil
	slot0._callbackTarget = nil
end

function slot0._loadNext(slot0)
	if slot0._loadIndex >= #slot0._pathList and slot0._loadingCount == 0 then
		slot0:_callback()

		return
	end

	for slot4 = 1, slot0._concurrentCount do
		slot0._loadIndex = slot0._loadIndex + 1

		if slot0._pathList and slot0._pathList[slot0._loadIndex] then
			slot0._loadingCount = slot0._loadingCount + 1

			loadAbAsset(slot5, false, slot0._onLoadCallback, slot0)
		end
	end
end

function slot0._onLoadCallback(slot0, slot1)
	if not slot0._resList then
		return
	end

	table.insert(slot0._resList, slot1)

	if slot1.IsLoadSuccess then
		slot1:Retain()

		slot0._resDict[slot1.ResPath] = slot1

		if slot1.AllAssetNames then
			for slot6 = 0, slot2.Length - 1 do
				slot0._singlePath2AssetItemDict[ResUrl.getPathWithoutAssetLib(slot2[slot6])] = slot1
			end
		end

		if slot0._oneFinishCallback then
			if slot0._callbackTarget then
				slot0._oneFinishCallback(slot0._callbackTarget, slot0, slot1)
			else
				slot0:_oneFinishCallback(slot1)
			end
		end
	elseif slot0._loadFailCallback then
		if slot0._callbackTarget then
			slot0._loadFailCallback(slot0._callbackTarget, slot0, slot1)
		else
			slot0:_loadFailCallback(slot1)
		end
	end

	slot0._loadingCount = slot0._loadingCount - 1

	if slot0._loadingCount <= 0 then
		if slot0._interval and slot0._interval > 0 then
			TaskDispatcher.runDelay(slot0._loadNext, slot0, slot0._interval)
		else
			slot0:_loadNext()
		end
	end
end

function slot0._callback(slot0)
	slot0.isLoading = false

	if slot0._finishCallback then
		if slot0._callbackTarget then
			slot0._finishCallback(slot0._callbackTarget, slot0)
		else
			slot0:_finishCallback()
		end
	end
end

return slot0
