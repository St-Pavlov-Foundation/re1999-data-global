module("booter.base.string", package.seeall)

slot0 = {
	_htmlspecialchars_set = {}
}
slot0._htmlspecialchars_set["&"] = "&amp;"
slot0._htmlspecialchars_set["\""] = "&quot;"
slot0._htmlspecialchars_set["'"] = "&#039;"
slot0._htmlspecialchars_set["<"] = "&lt;"
slot0._htmlspecialchars_set[">"] = "&gt;"

function slot0.nilorempty(slot0)
	return slot0 == nil or uv0.len(slot0) == 0
end

function slot0.htmlspecialchars(slot0)
	for slot4, slot5 in pairs(uv0._htmlspecialchars_set) do
		slot0 = uv0.gsub(slot0, slot4, slot5)
	end

	return slot0
end

function slot0.restorehtmlspecialchars(slot0)
	for slot4, slot5 in pairs(uv0._htmlspecialchars_set) do
		slot0 = uv0.gsub(slot0, slot5, slot4)
	end

	return slot0
end

function slot0.nl2br(slot0)
	return uv0.gsub(slot0, "\n", "<br />")
end

function slot0.text2html(slot0)
	return uv0.nl2br(uv0.gsub(uv0.htmlspecialchars(uv0.gsub(slot0, "\t", "    ")), " ", "&nbsp;"))
end

function slot0.split(slot0, slot1)
	slot0 = tostring(slot0)

	if tostring(slot1) == "" then
		return false
	end

	slot3 = {}

	for slot7, slot8 in function ()
		return uv0.find(uv1, uv2, uv3, true)
	end, nil,  do
		table.insert(slot3, uv0.sub(slot0, 0, slot7 - 1))

		slot2 = slot8 + 1
	end

	table.insert(slot3, uv0.sub(slot0, slot2))

	return slot3
end

function slot0.splitToNumber(slot0, slot1)
	slot6 = slot1

	for slot6, slot7 in ipairs(uv0.split(slot0, slot6)) do
		-- Nothing
	end

	return {
		[slot6] = tonumber(slot7)
	}
end

function slot0.splitToVector2(slot0, slot1)
	if slot0 == nil or slot1 == nil then
		return nil
	end

	if #uv0.split(slot0, slot1) == 2 then
		return Vector2.New(slot2[1], slot2[2])
	end

	return nil
end

function slot0.splitToVector3(slot0, slot1)
	if slot0 == nil or slot1 == nil then
		return nil
	end

	if #uv0.split(slot0, slot1) == 3 then
		return Vector3.New(slot2[1], slot2[2], slot2[3])
	end

	return nil
end

function slot0.trim(slot0)
	return uv0.gsub(slot0, "^%s*(.-)%s*$", "%1")
end

function slot0.ucfirst(slot0)
	return uv0.upper(uv0.sub(slot0, 1, 1)) .. uv0.sub(slot0, 2)
end

function slot1(slot0)
	return "%" .. uv0.format("%02X", uv0.byte(slot0))
end

function slot0.urlencode(slot0)
	return uv0.gsub(uv0.gsub(uv0.gsub(tostring(slot0), "\n", "\r\n"), "([^%w%.%- ])", uv1), " ", "+")
end

function slot0.urldecode(slot0)
	return uv0.gsub(uv0.gsub(uv0.gsub(slot0, "+", " "), "%%(%x%x)", function (slot0)
		return uv0.char(checknumber(slot0, 16))
	end), "\r\n", "\n")
end

function slot0.utf8len(slot0)
	slot2 = uv0.len(slot0)
	slot3 = 0
	slot4 = {
		0,
		192,
		224,
		240,
		248,
		252
	}

	while slot2 ~= 0 do
		slot5 = uv0.byte(slot0, -slot2)
		slot6 = #slot4

		while slot4[slot6] do
			if slot4[slot6] <= slot5 then
				slot2 = slot2 - slot6

				break
			end

			slot6 = slot6 - 1
		end

		slot3 = slot3 + 1
	end

	return slot3
end

function slot0.formatnumberthousands(slot0)
	slot2 = nil

	while true do
		slot1, slot4 = uv0.gsub(tostring(checknumber(slot0)), "^(-?%d+)(%d%d%d)", "%1,%2")

		if slot4 == 0 then
			break
		end
	end

	return slot1
end

function slot0.getValueByType(slot0, slot1)
	if slot1 == "string" then
		return slot0
	elseif slot1 == "number" then
		return tonumber(slot0)
	elseif slot1 == "boolean" then
		return slot0 == "1" or uv0.lower(slot0) == "true"
	end
end

function slot0.getFirstNum(slot0)
	slot2, slot3 = nil

	for slot7 = 1, uv0.len(slot0) do
		if tonumber(uv0.sub(slot0, slot7, slot7)) then
			if slot2 then
				slot2 = slot2 * 10 + slot3
			else
				slot2 = slot3
			end
		elseif slot2 then
			break
		end
	end

	return slot2
end

function slot0.getLastNum(slot0)
	slot2, slot3 = nil
	slot4 = 1

	for slot8 = uv0.len(slot0), 1, -1 do
		if tonumber(uv0.sub(slot0, slot8, slot8)) then
			slot2 = slot2 and slot3 * slot4 + slot2 or slot3
			slot4 = slot4 * 10
		elseif slot2 then
			break
		end
	end

	return slot2
end

setmetatable(slot0, {
	__index = _G.string
})
setGlobal("string", slot0)

return slot0
