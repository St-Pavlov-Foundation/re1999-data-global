module("framework.luamono.LuaMonoContainer", package.seeall)

slot0 = class("LuaMonoContainer")
slot1 = {}

function slot0.tryDispose()
	for slot3, slot4 in pairs(uv0) do
		if gohelper.isNil(slot3._go) then
			if isDebugBuild then
				logWarn("保底 destory: " .. slot3._path)
			end

			callWithCatch(slot3.__onDispose, slot3)
		end
	end
end

function slot0.__onDispose(slot0)
	if not uv0[slot0] then
		return
	end

	uv0[slot0] = nil

	if not slot0._luaMonoList then
		return
	end

	for slot4, slot5 in ipairs(slot0._luaMonoList) do
		slot5:__onDispose()
	end

	slot0._monoCom = nil
	slot0._go = nil
	slot0._luaMonoList = nil
	slot0._tempList = nil
	slot0._hasStarted = false
	slot0._compDirty = true
end

function slot0.ctor(slot0, slot1)
	slot0._monoCom = slot1
	slot0._go = slot1.gameObject
	slot0._luaMonoList = {}
	slot0._compNames = {}
	slot0._hasStarted = false
	slot0._compDirty = true

	if isDebugBuild then
		slot0._path = SLFramework.GameObjectHelper.GetPath(slot0._go)
	end

	uv0[slot0] = true
end

function slot0.getCompNames(slot0)
	return slot0._compNames
end

function slot0.addCompOnce(slot0, slot1, slot2)
	if slot0:getComp(slot1) ~= nil then
		return slot3
	end

	slot3 = slot1.New(slot2)

	slot3:__onInit()
	slot3:init(slot0._go)

	if slot0._hasStarted then
		if slot3.onEnable and slot0._monoCom:IsEnabled() then
			slot3:onEnable()
		end

		if slot3.onStart then
			slot3:onStart()
		end

		slot3:addEventListeners()
	end

	slot0._compDirty = true

	table.insert(slot0._luaMonoList, slot3)
	table.insert(slot0._compNames, slot3.__cname)

	return slot3
end

function slot0.removeComp(slot0, slot1)
	slot3 = nil

	for slot7 = #slot0._luaMonoList, 1, -1 do
		if slot1 == slot0._luaMonoList[slot7] then
			slot0._compDirty = true

			table.remove(slot0._luaMonoList, slot7)
			table.remove(slot0._compNames, slot7)
			slot0:_onRemove(slot3)

			break
		end
	end
end

function slot0.removeCompByDefine(slot0, slot1)
	slot3 = nil

	for slot7 = #slot0._luaMonoList, 1, -1 do
		if isTypeOf(slot0._luaMonoList[slot7], slot1) then
			slot0._compDirty = true

			table.remove(slot0._luaMonoList, slot7)
			table.remove(slot0._compNames, slot7)
			slot0:_onRemove(slot3)

			break
		end
	end
end

function slot0._onRemove(slot0, slot1)
	if slot1.onDisable then
		slot1:onDisable()
	end

	if slot1.removeEventListeners then
		slot1:removeEventListeners()
	end

	if slot1.onDestroy then
		slot1:onDestroy()
	end

	slot1:__onDispose()
end

function slot0.getComp(slot0, slot1)
	for slot5, slot6 in ipairs(slot0._luaMonoList) do
		if isTypeOf(slot6, slot1) then
			return slot6
		end
	end

	return nil
end

function slot0.onEnable(slot0)
	for slot5, slot6 in ipairs(slot0:_getCompListTemp()) do
		if slot6.onEnable then
			slot6:onEnable()
		end
	end

	slot1 = nil
end

function slot0.onDisable(slot0)
	for slot5, slot6 in ipairs(slot0:_getCompListTemp()) do
		if slot6.onDisable then
			slot6:onDisable()
		end
	end

	slot1 = nil
end

function slot0.onStart(slot0)
	slot0._hasStarted = true

	for slot5, slot6 in ipairs(slot0:_getCompListTemp()) do
		if slot6.onStart then
			slot6:onStart()
		end

		if slot6.addEventListeners then
			slot6:addEventListeners()
		end
	end

	slot1 = nil
end

function slot0.onUpdate(slot0)
	for slot5, slot6 in ipairs(slot0:_getCompListTemp()) do
		if slot6.onUpdate then
			slot6:onUpdate()
		end
	end

	slot1 = nil
end

function slot0.onDestroy(slot0)
	if not uv0[slot0] then
		return
	end

	uv0[slot0] = nil

	for slot5, slot6 in ipairs(slot0:_getCompListTemp()) do
		slot0:_onRemove(slot6)
	end

	slot0._monoCom = nil
	slot0._go = nil
	slot0._luaMonoList = nil
	slot0._tempList = nil
	slot0._hasStarted = false
	slot0._compDirty = true
end

function slot0.onTriggerEnter(slot0, slot1)
	for slot6, slot7 in ipairs(slot0:_getCompListTemp()) do
		if slot7.onTriggerEnter then
			slot7:onTriggerEnter(slot1)
		end
	end

	slot2 = nil
end

function slot0.onTriggerExit(slot0, slot1)
	for slot6, slot7 in ipairs(slot0:_getCompListTemp()) do
		if slot7.onTriggerExit then
			slot7:onTriggerExit(slot1)
		end
	end

	slot2 = nil
end

function slot0._getCompListTemp(slot0)
	if slot0._compDirty then
		slot0._tempList = slot0._tempList or {}

		for slot4, slot5 in ipairs(slot0._luaMonoList) do
			slot0._tempList[slot4] = slot5
		end

		for slot4 = #slot0._luaMonoList + 1, #slot0._tempList do
			slot0._tempList[slot4] = nil
		end

		slot0._compDirty = false
	end

	return slot0._tempList
end

return slot0
