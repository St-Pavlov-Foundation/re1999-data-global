module("framework.network.socket.ConnectAliveMgr", package.seeall)

slot0 = class("ConnectAliveMgr")

function slot0.ctor(slot0)
	slot0._isConnected = false

	LuaEventSystem.addEventMechanism(slot0)
end

function slot0.init(slot0)
	slot0._connectLoginContext = {}
	slot0._loginFlow = FlowSequence.New()
	slot0._loginFlow.flowName = "loginFlow"

	slot0._loginFlow:addWork(WorkConnectSocket.New(true))
	slot0._loginFlow:addWork(WorkSystemLogin.New({
		connectWay = 0
	}))
	slot0._loginFlow:registerDoneListener(slot0._onLoginDone, slot0)

	slot0._keepAliveFlow = FlowSequence.New()
	slot0._keepAliveFlow.flowName = "keepAliveFlow"

	slot0._keepAliveFlow:addWork(WorkAliveConnectCheck.New())
	slot0._keepAliveFlow:addWork(WorkWaitSeconds.New(1))
	slot0._keepAliveFlow:addWork(WorkSocketDispose.New())
	slot0._keepAliveFlow:addWork(WorkConnectSocket.New())
	slot0._keepAliveFlow:addWork(WorkSystemLogin.New({
		connectWay = 1
	}))
	slot0._keepAliveFlow:addWork(WorkGetLostCmdRespRequest.New())
	slot0._keepAliveFlow:addWork(WorkResendPackets.New())
	slot0._keepAliveFlow:registerDoneListener(slot0._onLostConnect, slot0)

	slot0._reconectFlow = FlowSequence.New()
	slot0._reconectFlow.flowName = "reconectFlow"

	slot0._reconectFlow:addWork(WorkConnectSocket.New())
	slot0._reconectFlow:addWork(WorkSystemLogin.New({
		connectWay = 1
	}))
	slot0._reconectFlow:addWork(WorkGetLostCmdRespRequest.New())
	slot0._reconectFlow:addWork(WorkResendPackets.New())
	slot0._reconectFlow:registerDoneListener(slot0._onReconnectDone, slot0)

	slot0._logoutFlow = FlowSequence.New()
	slot0._logoutFlow.flowName = "logoutFlow"

	slot0._logoutFlow:addWork(WorkSystemLogout.New())
	slot0._logoutFlow:registerDoneListener(slot0._onLogoutDone, slot0)

	slot0._preSender = AliveCheckPreSender.New()
	slot0._preReceiver = AliveCheckPreReceiver.New(slot0._preSender)

	LuaSocketMgr.instance:registerPreSender(slot0._preSender)
	LuaSocketMgr.instance:registerPreReceiver(slot0._preReceiver)
	uv0.instance:registerCallback(ConnectEvent.OnMsgTimeout, slot0._onMsgTimeout, slot0)
end

function slot0.dispose(slot0)
	slot0._loginFlow:stop()
	slot0._keepAliveFlow:stop()
	slot0._reconectFlow:stop()
	slot0._logoutFlow:stop()

	slot0._isConnected = false

	LuaSocketMgr.instance:unregisterPreSender(slot0._preSender)
	LuaSocketMgr.instance:unregisterPreReceiver(slot0._preReceiver)
	uv0.instance:unregisterCallback(ConnectEvent.OnMsgTimeout, slot0._onMsgTimeout, slot0)
end

function slot0.login(slot0, slot1, slot2, slot3, slot4, slot5, slot6)
	slot0._connectLoginContext.dontReconnect = nil
	slot0._connectLoginContext.msg = nil
	slot0._connectLoginContext.ip = slot1
	slot0._connectLoginContext.port = slot2
	slot0._connectLoginContext.account = slot3
	slot0._connectLoginContext.password = slot4
	slot0._loginCallback = slot5
	slot0._loginCallbackObj = slot6

	slot0:clearUnresponsiveMsgList()
	slot0._loginFlow:start(slot0._connectLoginContext)
end

function slot0.logout(slot0)
	if slot0._loginFlow.status == WorkStatus.Running then
		slot0._loginFlow:stop()
		logError("都没登录成功，怎么logout的")
	end

	if slot0._logoutFlow.status == WorkStatus.Running then
		slot0._logoutFlow:stop()
		logError("重复调用logout了")
	end

	if slot0._keepAliveFlow.status == WorkStatus.Running then
		slot0._keepAliveFlow:stop()
		logNormal("活动连接过程中调用logout")
	end

	if slot0._reconectFlow.status == WorkStatus.Running then
		slot0._reconectFlow:stop()
		logNormal("重连过程中调用logout")
	end

	slot0._isConnected = false

	slot0._logoutFlow:start({})
	slot0:clearUnresponsiveMsgList()
	slot0:clearCurrDownTag()
end

function slot0.reconnect(slot0)
	slot0._connectLoginContext.dontReconnect = nil
	slot0._connectLoginContext.msg = nil

	slot0._reconectFlow:start(slot0._connectLoginContext)
end

function slot0.stopReconnect(slot0)
	if slot0._reconectFlow.status == WorkStatus.Running then
		slot0._reconectFlow:stop()
	end
end

function slot0.isConnected(slot0)
	return slot0._isConnected
end

function slot0.getFirstUnresponsiveMsg(slot0)
	return slot0._preSender:getFirstUnresponsiveMsg()
end

function slot0.getUnresponsiveMsgList(slot0)
	return slot0._preSender:getUnresponsiveMsgList()
end

function slot0.clearUnresponsiveMsgList(slot0)
	slot0._preSender:clear()
end

function slot0.addUnresponsiveMsg(slot0, slot1, slot2, slot3)
	slot0._preSender:preSendProto(slot1, slot2, slot3)
end

function slot0.ignoreUnimportantCmds(slot0)
	slot0._preSender:ignoreUnimportantCmds()
end

function slot0.setNonResendCmds(slot0, slot1)
	for slot5, slot6 in ipairs(slot1) do
		WorkResendPackets.NonResendCmdDict[slot6] = true
	end
end

function slot0.getCurrDownTag(slot0)
	return slot0._preReceiver:getCurrDownTag()
end

function slot0.clearCurrDownTag(slot0)
	slot0._preReceiver:clearCurrDownTag()
end

function slot0.lostMessage(slot0)
	LuaSocketMgr.instance:endConnect()

	slot0._connectLoginContext.dontReconnect = true

	slot0._loginFlow:stop()
	slot0._keepAliveFlow:stop()
	slot0._reconectFlow:stop()
	slot0._logoutFlow:stop()

	slot0._isConnected = false

	uv0.instance:dispatchEvent(ConnectEvent.OnLostMessage)
end

function slot0._onLoginDone(slot0, slot1)
	if slot1 then
		logNormal("<color=#00FF00>ConnectAliveMgr:_onLoginDone() success </color>")

		slot0._connectLoginContext.dontReconnect = nil
		slot0._connectLoginContext.msg = nil
		slot0._isConnected = true

		slot0._keepAliveFlow:start(slot0._connectLoginContext)
	else
		slot0._isConnected = false

		logNormal("<color=red>ConnectAliveMgr:_onLoginDone() fail </color>")
		LuaSocketMgr.instance:endConnect()
	end

	if slot0._loginCallback then
		slot2 = {
			socketFail = true
		}

		if slot0._connectLoginContext.socketFail then
			slot0._connectLoginContext.socketFail = nil
		end

		if slot0._connectLoginContext.systemLoginFail then
			slot0._connectLoginContext.systemLoginFail = nil
			slot2.systemLoginFail = true
			slot2.msg = slot0._connectLoginContext.msg
			slot0._connectLoginContext.msg = nil
		end

		if slot0._loginCallbackObj then
			slot0._loginCallback(slot0._loginCallbackObj, slot1, slot2)
		else
			slot0._loginCallback(slot1, slot2)
		end
	end

	slot0._loginCallback = nil
	slot0._loginCallbackObj = nil
end

function slot0._onLogoutDone(slot0, slot1)
	logNormal("<color=orange>主动登出完成</color>")
end

function slot0._onMsgTimeout(slot0)
	slot0._isConnected = false
end

function slot0._onLostConnect(slot0, slot1)
	slot2 = slot0._keepAliveFlow.context.dontReconnect
	slot3 = slot0._keepAliveFlow.context.msg
	slot0._connectLoginContext.dontReconnect = nil
	slot0._connectLoginContext.msg = nil

	if slot1 then
		logNormal("<color=orange>断线自动重连成功</color>")

		slot0._isConnected = true

		slot0._keepAliveFlow:start(slot0._connectLoginContext)
	else
		slot0._isConnected = false

		logNormal("<color=orange>断线了，需要用户操作重连</color>")
		LuaSocketMgr.instance:endConnect()
		uv0.instance:dispatchEvent(ConnectEvent.OnLostConnect, slot2, slot3)
	end
end

function slot0._onReconnectDone(slot0, slot1)
	slot2 = slot0._reconectFlow.context.dontReconnect
	slot3 = slot0._reconectFlow.context.msg
	slot0._connectLoginContext.dontReconnect = nil
	slot0._connectLoginContext.msg = nil

	if slot1 then
		logNormal("<color=#00FF00>用户主动重连成功</color>")

		slot0._isConnected = true

		slot0._keepAliveFlow:start(slot0._connectLoginContext)
		uv0.instance:dispatchEvent(ConnectEvent.OnReconnectSucc)
	else
		slot0._isConnected = false

		logNormal("<color=#00FF00>用户主动重连失败，需要用户再次操作重连</color>")
		LuaSocketMgr.instance:endConnect()
		uv0.instance:dispatchEvent(ConnectEvent.OnReconnectFail, slot2, slot3)
	end
end

slot0.instance = slot0.New()

return slot0
