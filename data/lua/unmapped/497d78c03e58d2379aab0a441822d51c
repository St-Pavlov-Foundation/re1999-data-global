module("framework.network.socket.work.WorkAliveConnectCheck", package.seeall)

slot0 = class("WorkAliveConnectCheck", BaseWork)

function slot0.onStart(slot0, slot1)
	slot0:_addEvents()
end

function slot0.onResume(slot0)
	slot0:_addEvents()
end

function slot0.clearWork(slot0)
	slot0:_removeEvents()
end

function slot0._addEvents(slot0)
	TaskDispatcher.runRepeat(slot0._onSecond, slot0, 1)
end

function slot0._removeEvents(slot0)
	TaskDispatcher.cancelTask(slot0._onSecond, slot0)
end

function slot0._onSecond(slot0)
	if not LuaSocketMgr.instance:isConnected() then
		logNormal("socket 断开了，检查工作结束，准备发起自动重连")
		slot0:onDone(true)

		return
	end

	if ConnectAliveMgr.instance:getFirstUnresponsiveMsg() and NetworkConst.UnresponsiveMsgMaxTime < Time.realtimeSinceStartup - slot1.time then
		slot2 = "cmd_" .. slot1.cmd .. " 超时未响应，主动断开连接，准备发起自动重连, "
		slot3 = string.format("%.2f - %.2f > %.2f", Time.realtimeSinceStartup, slot1.time, NetworkConst.UnresponsiveMsgMaxTime)
		slot4 = ConnectAliveMgr.instance:getUnresponsiveMsgList()

		for slot9, slot10 in ipairs(slot4) do
			slot5 = string.format("%s%d(%.2f)", ", 未响应包" .. #slot4 .. ": ", slot10.cmd, slot10.time)
		end

		logNormal(slot2 .. slot3 .. slot5)
		LuaSocketMgr.instance:endConnect()
		ConnectAliveMgr.instance:dispatchEvent(ConnectEvent.OnMsgTimeout)
		slot0:onDone(true)
	end
end

return slot0
