module("framework.mvc.ConfigMgr", package.seeall)

slot0 = class("ConfigMgr")

function slot0.ctor(slot0)
	slot0._resPath = "configs/excel2json/json_"
	slot0._luaPath = "modules.configs.excel2json.lua_"
	slot0._abPath = "configs/datacfg_"
	slot0._requestorList = {}
	slot0._configNameList = {}
	slot0._configName2PathDict = {}
	slot0._configList = {}
	slot0._configDict = {}
	slot0._onLoadedCallback = nil
	slot0._onLoadedCallbackObj = nil
end

function slot0.init(slot0, slot1, slot2, slot3)
	slot0._resPath = slot1
	slot0._luaPath = slot2
	slot0._abPath = slot3
end

function slot0.addRequestor(slot0, slot1)
	table.insert(slot0._requestorList, slot1)

	for slot7 = 1, slot1:reqConfigNames() and #slot2 or 0 do
		if not slot0._configName2PathDict[slot2[slot7]] then
			slot0._configName2PathDict[slot8] = string.format("%s%s.json", slot0._resPath, slot8)

			table.insert(slot0._configNameList, slot8)
		end
	end
end

function slot0.loadConfigs(slot0, slot1, slot2)
	if #slot0._configNameList == 0 then
		if slot1 then
			if slot2 then
				slot1(slot2)
			else
				slot1()
			end
		end

		return
	end

	slot0._onLoadedCallback = slot1
	slot0._onLoadedCallbackObj = slot2

	if GameResMgr.IsFromEditorDir then
		for slot6, slot7 in ipairs(slot0._configNameList) do
			loadNonAbAsset(slot0._configName2PathDict[slot7], SLFramework.AssetType.TEXT, slot0._onConfigAbCallback, slot0)
		end

		logNormal("--编辑器Direct运行时，检查对应的json、jua是否有缺")
		slot0:_editorCheckLuaJson()
	else
		logNormal("-- json的ab是 AllToOne ，加载一次，就可以把所有json拿到了（可能会有多余的配置，自觉删除无用配置，否则报错）self._abPath = " .. slot0._abPath)

		slot0._jsonList = {}
		slot0._frameHandleNum = 20
		slot0._nowHandNum = 0
		slot0._allHandNum = 0
		slot0._maxConfigDatNum = 5
		slot0._configDatIndex = 1

		loadNonAbAsset(string.format("%s%s%s", slot0._abPath, slot0._configDatIndex, ".dat"), SLFramework.AssetType.DATA, slot0._onConfigOneAbCallback, slot0)
	end
end

function slot0._onConfigOneAbCallback(slot0, slot1)
	slot3 = cjson.decode(slot1:GetNonAbTextAsset(true))
	slot0._allHandNum = slot0._allHandNum + tabletool.len(slot3)

	for slot7, slot8 in pairs(slot3) do
		table.insert(slot0._jsonList, slot8)
	end

	if slot0._configDatIndex == slot0._maxConfigDatNum then
		slot0:_onConfigAllAbCallback()
	else
		slot0._configDatIndex = slot0._configDatIndex + 1

		loadNonAbAsset(string.format("%s%s%s", slot0._abPath, slot0._configDatIndex, ".dat"), SLFramework.AssetType.DATA, slot0._onConfigOneAbCallback, slot0)
	end
end

function slot0._onConfigAllAbCallback(slot0)
	TaskDispatcher.runRepeat(slot0._onConfigLoadedRepeat, slot0, 0.01)
end

function slot0._onConfigAbCallback(slot0, slot1)
	if not slot1.IsLoadSuccess then
		logError("config load fail: " .. slot1.ResPath)

		return
	end

	if GameResMgr.IsFromEditorDir then
		slot0:_onConfigLoaded(slot1.TextAsset)
	else
		slot3 = cjson.decode(slot1:GetNonAbTextAsset(true))
		slot0._frameHandleNum = 20
		slot0._nowHandNum = 0
		slot0._allHandNum = tabletool.len(slot3)
		slot0._jsonList = {}

		for slot7, slot8 in pairs(slot3) do
			table.insert(slot0._jsonList, slot8)
		end

		TaskDispatcher.runRepeat(slot0._onConfigLoadedRepeat, slot0, 0.01)
	end
end

function slot0._onConfigLoadedRepeat(slot0)
	for slot4 = 1, slot0._frameHandleNum do
		slot0._nowHandNum = slot0._nowHandNum + 1

		slot0:_onConfigLoaded(slot0._jsonList[slot0._nowHandNum])

		if slot0._nowHandNum == slot0._allHandNum then
			TaskDispatcher.cancelTask(slot0._onConfigLoadedRepeat, slot0)

			slot0._jsonList = nil

			if not GameResMgr.IsFromEditorDir and #slot0._configList ~= #slot0._configNameList then
				for slot9, slot10 in ipairs(slot0._configNameList) do
					if not slot0._configDict[slot10] then
						logError("config: <" .. slot10 .. "> not exist. You're runnning in AssetBundle mode.")
					end
				end
			end

			break
		end
	end
end

function slot0._onConfigLoaded(slot0, slot1)
	slot2 = slot0:_decodeJsonStr(slot1)
	slot4 = slot2[2]

	if not slot2[1] then
		logError("config name not exist: " .. slot1)

		return
	end

	if not addGlobalModule(slot0._luaPath .. slot3, slot3) then
		logError("config lua head not exist: <" .. slot3 .. ">")

		return
	end

	if not GameResMgr.IsFromEditorDir and isDebugBuild and GameConfig.UseDebugLuaFile and not string.nilorempty(SLFramework.FileHelper.ReadText(UnityEngine.Application.persistentDataPath .. string.format("/lua/json_%s.json", slot3))) then
		logNormal("替换了外部目录的json配置表：" .. slot3)

		slot4 = slot0:_decodeJsonStr(slot7)[2]
	end

	slot5.onLoad(slot4)

	if not slot0._configDict[slot3] then
		if slot0._configName2PathDict[slot3] then
			slot0._configDict[slot3] = slot5

			table.insert(slot0._configList, slot5)
		else
			logWarn("config: <" .. slot3 .. "> never use, please remove it")
		end
	end

	if #slot0._configList == #slot0._configNameList and not slot0._requestorCbDone then
		slot0._requestorCbDone = true

		for slot9, slot10 in ipairs(slot0._requestorList) do
			for slot16 = 1, slot10:reqConfigNames() and #slot11 or 0 do
				slot10:onConfigLoaded(slot11[slot16], slot0._configDict[slot11[slot16]])
			end
		end

		if slot0._onLoadedCallback then
			if slot0._onLoadedCallbackObj then
				slot0._onLoadedCallback(slot0._onLoadedCallbackObj)
			else
				slot0._onLoadedCallback()
			end
		end

		slot0._onLoadedCallback = nil
		slot0._onLoadedCallbackObj = nil
	end
end

function slot0._decodeJsonStr(slot0, slot1)
	slot2 = nil

	if isDebugBuild then
		slot3, slot4 = pcall(cjson.decode, slot1)

		if not slot3 then
			logError("配置解析失败: " .. slot1)

			return
		end

		slot2 = slot4
	else
		slot2 = cjson.decode(slot1)
	end

	return slot2
end

function slot0._editorCheckLuaJson(slot0)
	slot4 = SLFramework.FileHelper.GetDirFilePaths(SLFramework.FrameworkSettings.AssetRootDir .. "/configs/excel2json/")
	slot5 = {
		[string.sub(SLFramework.FileHelper.GetFileName(slot11, false), 5)] = true
	}
	slot6 = {}

	for slot10 = 0, SLFramework.FileHelper.GetDirFilePaths(SLFramework.FrameworkSettings.ProjLuaRootDir .. "/modules/configs/excel2json/").Length - 1 do
		if not string.find(slot3[slot10], ".meta") and string.find(slot11, "lua_") then
			-- Nothing
		end
	end

	for slot10 = 0, slot4.Length - 1 do
		if not string.find(slot4[slot10], ".meta") and string.find(slot11, "json_") then
			slot6[string.sub(SLFramework.FileHelper.GetFileName(slot11, false), 6)] = true
		end
	end

	for slot10, slot11 in pairs(slot5) do
		if not slot6[slot10] then
			logError("config lua_" .. slot10 .. ".lua not match, <color=red><json_" .. slot10 .. ".json>" .. " not exist</color>")
		end
	end

	for slot10, slot11 in pairs(slot6) do
		if not slot5[slot10] then
			logError("config json_" .. slot10 .. ".json not match, <color=red><lua_" .. slot10 .. ".lua>" .. " not exist</color>")
		end
	end
end

slot0.instance = slot0.New()

return slot0
