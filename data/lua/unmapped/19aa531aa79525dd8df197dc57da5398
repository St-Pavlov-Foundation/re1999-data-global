module("framework.mvc.view.ViewModalMaskMgr", package.seeall)

slot0 = class("ViewModalMaskMgr")

function slot0.ctor(slot0)
	slot0.DefaultMaskAlpha = 0
	slot0._maskGO = nil
	slot0._imgMask = nil
end

function slot0.init(slot0)
	ViewMgr.instance:registerCallback(ViewEvent.OnOpenView, slot0._onOpenView, slot0)
	ViewMgr.instance:registerCallback(ViewEvent.ReOpenWhileOpen, slot0._onReOpenWhileOpen, slot0)
	ViewMgr.instance:registerCallback(ViewEvent.OnCloseViewFinish, slot0._onCloseViewFinish, slot0)
end

function slot0._onOpenView(slot0, slot1, slot2)
	if ViewMgr.instance:isModal(slot1) then
		slot0:_adjustMask(slot1)
	elseif ViewMgr.instance:isFull(slot1) then
		slot0:_hideModalMask()
	end
end

function slot0._onReOpenWhileOpen(slot0, slot1, slot2)
	slot0:_onOpenView(slot1, slot2)
end

function slot0._onCloseViewFinish(slot0, slot1, slot2)
	if ViewMgr.instance:isModal(slot1) then
		slot0:_hideModalMask()
	end

	if ViewMgr.instance:isFull(slot1) or slot3 then
		for slot8 = #ViewMgr.instance:getOpenViewNameList(), 1, -1 do
			if ViewMgr.instance:isModal(slot4[slot8]) and ViewMgr.instance:isOpenFinish(slot9) then
				slot0:_adjustMask(slot9)

				break
			elseif ViewMgr.instance:isFull(slot9) then
				break
			end
		end
	end
end

function slot0._checkCreateMask(slot0)
	if not slot0._maskGO then
		slot0._maskGO = gohelper.find("UIRoot/POPUP/ViewMask")
		slot0._imgMask = slot0._maskGO:GetComponent(gohelper.Type_Image)
		slot0.DefaultMaskAlpha = slot0._imgMask.color.a

		gohelper.setActive(slot0._maskGO, true)
		SLFramework.UGUI.UIClickListener.Get(slot0._maskGO):AddClickListener(slot0._onClickModalMask, slot0)
	end
end

function slot0._adjustMask(slot0, slot1)
	slot0:_checkCreateMask()

	slot2 = ViewMgr.instance:getContainer(slot1)
	slot3 = slot2:getSetting()

	gohelper.addChild(ViewMgr.instance:getUILayer(slot3.layer), slot0._maskGO)
	gohelper.setActive(slot0._maskGO, true)
	gohelper.setSiblingBefore(slot0._maskGO, slot2.viewGO)

	slot6 = slot0._imgMask.color
	slot6.a = slot3.maskAlpha or slot0.DefaultMaskAlpha
	slot0._imgMask.color = slot6
end

function slot0._hideModalMask(slot0)
	gohelper.setActive(slot0._maskGO, false)
end

function slot0._onClickModalMask(slot0)
	slot1 = nil

	for slot6 = #ViewMgr.instance:getOpenViewNameList(), 1, -1 do
		if ViewMgr.instance:isModal(slot2[slot6]) then
			slot1 = slot7

			break
		elseif ViewMgr.instance:isFull(slot7) then
			break
		end
	end

	if slot1 then
		if ViewMgr.instance:isOpenFinish(slot1) then
			ViewMgr.instance:getContainer(slot1):onClickModalMaskInternal()
		else
			logNormal("modal view not open finish: " .. slot1)
		end
	else
		slot0:_hideModalMask()
		logError("no modal view belong to mask")
	end
end

slot0.instance = slot0.New()

return slot0
