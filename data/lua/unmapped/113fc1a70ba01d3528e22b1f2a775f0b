module("framework.mvc.view.ViewMgr", package.seeall)

slot0 = class("ViewMgr")

function slot0.ctor(slot0)
	slot0._viewSettings = nil
	slot0._viewContainerDict = {}
	slot0._openViewNameList = {}
	slot0._openViewNameSet = {}
	slot0._uiCanvas = nil
	slot0._uiRoot = nil
	slot0._topUICanvas = nil
	slot0._topUIRoot = nil
	slot0._uiLayerDict = {}

	LuaEventSystem.addEventMechanism(slot0)
end

function slot0.init(slot0, slot1)
	slot0._viewSettings = slot1

	ViewModalMaskMgr.instance:init()
	ViewFullScreenMgr.instance:init()
	ViewDestroyMgr.instance:init()
end

function slot0.openTabView(slot0, slot1, slot2, slot3, slot4, slot5, slot6)
	slot2 = slot2 or {}
	slot2.defaultTabIds = {
		slot4,
		slot5,
		slot6
	}

	slot0:openView(slot1, slot2, slot3)
end

function slot0.openView(slot0, slot1, slot2, slot3)
	if slot1 == nil or slot1 == "" then
		logError("viewName is empty")

		return
	end

	slot4 = slot0:getContainer(slot1)

	if slot0._openViewNameSet[slot1] and slot4 then
		tabletool.removeValue(slot0._openViewNameList, slot1)
		table.insert(slot0._openViewNameList, slot1)
		gohelper.setAsLastSibling(slot4.viewGO)
		slot4:onUpdateParamInternal(slot2)
		uv0.instance:dispatchEvent(ViewEvent.ReOpenWhileOpen, slot1, slot2)

		return
	end

	slot5 = slot0:_createContainer(slot1)
	slot0._viewContainerDict[slot1] = slot5

	table.insert(slot0._openViewNameList, slot1)

	slot0._openViewNameSet[slot1] = true

	slot5:openInternal(slot2, slot3)
end

function slot0.closeView(slot0, slot1, slot2, slot3)
	if not slot1 or not slot0._openViewNameSet[slot1] then
		return
	end

	slot0._openViewNameSet[slot1] = nil

	tabletool.removeValue(slot0._openViewNameList, slot1)

	slot4 = slot0:getContainer(slot1)

	slot4:setCloseType(slot3 and BaseViewContainer.CloseTypeManual or nil)
	slot4:closeInternal(slot2)
end

function slot0.destroyView(slot0, slot1)
	if slot0:getContainer(slot1) then
		if slot2:isOpen() then
			slot2:closeInternal(true)
		end

		slot2:destroyView()
		slot2:__onDispose()

		slot0._viewContainerDict[slot1] = nil

		if slot0:isFull(slot1) then
			uv0.instance:dispatchEvent(ViewEvent.DestroyFullViewFinish, slot1)
		elseif slot0:isModal(slot1) then
			uv0.instance:dispatchEvent(ViewEvent.DestroyModalViewFinish, slot1)
		end

		uv0.instance:dispatchEvent(ViewEvent.DestroyViewFinish, slot1)
	end
end

function slot0.isOpen(slot0, slot1)
	return slot0:getContainer(slot1) and slot2:isOpen()
end

function slot0.isOpening(slot0, slot1)
	return slot0:getContainer(slot1) and slot2:isOpening()
end

function slot0.isOpenFinish(slot0, slot1)
	return slot0:getContainer(slot1) and slot2:isOpenFinish()
end

function slot0.closeAllModalViews(slot0, slot1)
	slot2 = nil

	for slot6 = #slot0._openViewNameList, 1, -1 do
		slot7 = slot0._openViewNameList[slot6]

		if (not slot1 or not tabletool.indexOf(slot1, slot7)) and slot0:isModal(slot7) then
			table.insert(slot2 or {}, slot7)
		end
	end

	if slot2 then
		for slot6 = 1, #slot2 do
			slot0:closeView(slot2[slot6], true)
		end
	end
end

function slot0.closeAllPopupViews(slot0, slot1, slot2)
	slot3 = nil

	for slot7 = #slot0._openViewNameList, 1, -1 do
		slot9 = slot0:getSetting(slot0._openViewNameList[slot7])

		if (not slot1 or not tabletool.indexOf(slot1, slot8)) and (slot9.layer == UILayerName.PopUpTop or slot9.layer == UILayerName.PopUp) then
			table.insert(slot3 or {}, slot8)
		end
	end

	if slot3 then
		for slot8 = 1, #slot3 do
			slot0:closeView(slot3[slot8], true, slot8 == slot4 and slot2)
		end
	end
end

function slot0.closeAllViews(slot0, slot1)
	slot2 = nil

	for slot6 = #slot0._openViewNameList, 1, -1 do
		slot7 = slot0._openViewNameList[slot6]

		if not slot1 or not tabletool.indexOf(slot1, slot7) then
			table.insert(slot2 or {}, slot7)
		end
	end

	if slot2 then
		for slot6 = 1, #slot2 do
			slot0:closeView(slot2[slot6], true)
		end
	end
end

function slot0.IsPopUpViewOpen(slot0)
	for slot4 = #slot0._openViewNameList, 1, -1 do
		if slot0:getSetting(slot0._openViewNameList[slot4]).layer == UILayerName.PopUpTop or slot6.layer == UILayerName.PopUp or slot6.layer == UILayerName.Guide then
			return true
		end
	end

	return false
end

function slot0.getSetting(slot0, slot1)
	return slot0._viewSettings[slot1]
end

function slot0.getOpenViewNameList(slot0)
	return slot0._openViewNameList
end

function slot0.hasOpenFullView(slot0)
	for slot4, slot5 in ipairs(slot0._openViewNameList) do
		if slot0:isFull(slot5) then
			return true
		end
	end

	return false
end

function slot0.isNormal(slot0, slot1)
	return slot0._viewSettings[slot1] and slot2.viewType == ViewType.Normal
end

function slot0.isModal(slot0, slot1)
	return slot0._viewSettings[slot1] and slot2.viewType == ViewType.Modal
end

function slot0.isFull(slot0, slot1)
	return slot0._viewSettings[slot1] and slot2.viewType == ViewType.Full
end

function slot0.getUIRoot(slot0)
	if not slot0._uiRoot then
		slot0._uiRoot = gohelper.find("UIRoot")
	end

	return slot0._uiRoot
end

function slot0.getTopUIRoot(slot0)
	if not slot0._topUIRoot then
		slot0._topUIRoot = gohelper.find("UIRoot")
	end

	return slot0._topUIRoot
end

function slot0.getUICanvas(slot0)
	if not slot0._uiCanvas then
		slot0._uiCanvas = slot0:getUIRoot():GetComponent("Canvas")
	end

	return slot0._uiCanvas
end

function slot0.getTopUICanvas(slot0)
	if not slot0._topUICanvas then
		slot0._topUICanvas = slot0:getTopUIRoot():GetComponent("Canvas")
	end

	return slot0._topUICanvas
end

function slot0.getUILayer(slot0, slot1)
	if not slot0._uiLayerDict[slot1] then
		if slot1 == UILayerName.IDCanvasPopUp then
			slot2 = gohelper.find(slot1)
		else
			slot3 = slot0:getUIRoot()
			slot2 = gohelper.findChild(slot0:getUIRoot(), slot1) or gohelper.findChild(slot0:getTopUIRoot(), slot1)
		end

		if slot2 then
			slot0._uiLayerDict[slot1] = slot2
		end
	end

	return slot2
end

function slot0.getContainer(slot0, slot1)
	return slot0._viewContainerDict[slot1]
end

function slot0._createContainer(slot0, slot1)
	if not slot0._viewContainerDict[slot1] then
		if slot0:getSetting(slot1) == nil then
			logError("view setting is nil " .. slot1)
		end

		if getModulePath(slot3.container) then
			slot2 = addGlobalModule(slot4).New()

			slot2:__onInit()
			slot2:setSetting(slot1, slot3)
		else
			logError("ViewContainer class path not exist: " .. slot1)
		end
	end

	return slot2
end

slot0.instance = slot0.New()

return slot0
