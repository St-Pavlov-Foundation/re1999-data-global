module("booter.base.logger", package.seeall)

function concatMsg(...)
	return table.concat({
		...
	}, " ")
end

function _addTraceback(...)
	return concatMsg(...) .. debug.traceback("", 2)
end

function logNormal(...)
	slot0 = concatMsg(...)

	if canLogNormal and slot0 then
		print(slot0)
	end
end

function logWarn(...)
	slot0 = concatMsg(...)

	if canLogWarn and slot0 then
		printWarn(slot0)
	end
end

function logError(...)
	if canLogError then
		printError(_addTraceback(...))
	end
end

function forceLog(...)
	forcePrint(...)
end

function dump(slot0, slot1, slot2)
	if type(slot2) ~= "number" then
		slot2 = 3
	end

	slot3 = {}

	function slot5(slot0)
		if type(slot0) == "string" then
			slot0 = "\"" .. slot0 .. "\""
		end

		return tostring(slot0)
	end

	print("dump from: " .. string.trim(string.split(debug.traceback("", 2), "\n")[3]))

	slot11 = "- "
	slot12 = 1

	function (slot0, slot1, slot2, slot3, slot4)
		spc = ""

		if type(slot4) == "number" then
			spc = string.rep(" ", slot4 - string.len(uv0(slot1 or "<var>")))
		end

		if type(slot0) ~= "table" then
			uv1[#uv1 + 1] = string.format("%s%s%s = %s", slot2, uv0(slot1), spc, uv0(slot0))
		elseif uv2[slot0] then
			uv1[#uv1 + 1] = string.format("%s%s%s = *REF*", slot2, slot1, spc)
		else
			uv2[slot0] = true

			if uv3 < slot3 then
				uv1[#uv1 + 1] = string.format("%s%s = *MAX NESTING*", slot2, slot1)
			else
				uv1[#uv1 + 1] = string.format("%s%s = {", slot2, uv0(slot1))
				slot5 = slot2 .. "    "
				slot6 = {}
				slot8 = {}

				for slot12, slot13 in pairs(slot0) do
					slot6[#slot6 + 1] = slot12

					if 0 < string.len(uv0(slot12)) then
						slot7 = slot15
					end

					slot8[slot12] = slot13
				end

				table.sort(slot6, function (slot0, slot1)
					if type(slot0) == "number" and type(slot1) == "number" then
						return slot0 < slot1
					else
						return tostring(slot0) < tostring(slot1)
					end
				end)

				for slot12, slot13 in ipairs(slot6) do
					uv4(slot8[slot13], slot13, slot5, slot3 + 1, slot7)
				end

				uv1[#uv1 + 1] = string.format("%s}", slot2)
			end
		end
	end(slot0, slot1, slot11, slot12)

	for slot11, slot12 in ipairs({}) do
		print(slot12)
	end
end

setGlobal("logNormal", logNormal)
setGlobal("logWarn", logWarn)
setGlobal("logError", logError)
setGlobal("forceLog", forceLog)
setGlobal("dump", dump)
