module("framework.mvc.BaseModel", package.seeall)

slot0 = class("BaseModel")

function slot0.ctor(slot0)
	slot0._idCounter = 1
	slot0._list = {}
	slot0._dict = {}
end

function slot0.onInit(slot0)
end

function slot0.reInit(slot0)
end

function slot0.reInitInternal(slot0)
	slot0:clear()
	slot0:reInit()
end

function slot0.clear(slot0)
	slot0._idCounter = 1
	slot0._list = {}
	slot0._dict = {}
end

function slot0.getList(slot0)
	return slot0._list
end

function slot0.getDict(slot0)
	return slot0._dict
end

function slot0.getCount(slot0)
	return #slot0._list
end

function slot0.getById(slot0, slot1)
	return slot0._dict[slot1]
end

function slot0.getByIndex(slot0, slot1)
	return slot0._list[slot1]
end

function slot0.getIndex(slot0, slot1)
	return tabletool.indexOf(slot0._list, slot1)
end

function slot0.sort(slot0, slot1)
	table.sort(slot0._list, slot1)
end

function slot0.addList(slot0, slot1)
	for slot5, slot6 in ipairs(slot1) do
		slot0:_fillMOId(slot6)

		if slot0._dict[slot6.id] then
			if tabletool.indexOf(slot0._list, slot6) then
				slot0._list[slot7] = slot6
			else
				for slot11, slot12 in ipairs(slot0._list) do
					if slot12.id == slot6.id then
						slot0._list[slot11] = slot6

						break
					end
				end

				logError("mo.id duplicated, type = " .. (slot6.__cname or "nil") .. ", id = " .. slot6.id)
			end
		else
			table.insert(slot0._list, slot6)
		end

		slot0._dict[slot6.id] = slot6
	end
end

function slot0.setList(slot0, slot1)
	slot0._list = {}
	slot0._dict = {}

	slot0:addList(slot1)
end

function slot0.addAt(slot0, slot1, slot2)
	slot0:_fillMOId(slot1)

	if slot0._dict[slot1.id] then
		if tabletool.indexOf(slot0._list, slot1) then
			slot0._list[slot3] = slot1
		else
			logError("mo in dict, but not in list: " .. cjson.encode(slot1))
		end

		logWarn(string.format("%s:addAt(mo, %d) fail, mo.id = %d has exist, cover origin data", slot0.__cname, slot2, slot1.id))
	else
		table.insert(slot0._list, slot2, slot1)
	end

	slot0._dict[slot1.id] = slot1
end

function slot0.addAtFirst(slot0, slot1)
	slot0:addAt(slot1, 1)
end

function slot0.addAtLast(slot0, slot1)
	slot0:addAt(slot1, #slot0._list + 1)
end

function slot0.removeAt(slot0, slot1)
	if slot1 > #slot0._list then
		return nil
	end

	if table.remove(slot0._list, slot1) then
		slot0._dict[slot2.id] = nil
	end

	return slot2
end

function slot0.removeFirst(slot0)
	return slot0:removeAt(1)
end

function slot0.removeLast(slot0)
	return slot0:removeAt(#slot0._list)
end

function slot0.remove(slot0, slot1)
	if tabletool.indexOf(slot0._list, slot1) then
		return slot0:removeAt(slot2)
	end
end

function slot0._fillMOId(slot0, slot1)
	if not slot1.id then
		while slot0._dict[slot0._idCounter] do
			slot0._idCounter = slot0._idCounter + 1
		end

		slot1.id = slot0._idCounter
		slot0._idCounter = slot0._idCounter + 1
	end
end

return slot0
